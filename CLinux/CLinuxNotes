The linux is written in C.

Function Declaration

A function declaration defined before main and after preprocessor directives is simply the prototype of the function informing the compiler what the return type of the function is and telling the compiler the name of the function as well as indicating the compiler all of the types of the arguments that go into the function. Function Declaration is also known as function prototypes and these prototypes could also be defined in separate header file with .h extension.


Example & Format : 
function declaration : return_data_type func_name(data_type *pointer_name1,data_type *pointer_name2,...)


Function Definition : The function definition, on the other hand,
is the whole thing which includes the code that defines the function, what the function actually does.
Function definition is normally done outside of main and in the start of a program soon after preprocessor directives or it could also be done in separate code files with .c extension and it could also be done after main function of a program.


Example & Format : 
return_data_type func_name(data_type *,data_type *,....){

function code 

}  

                           --------------------------Unit 7.1:Using a Library In C -----------------------------------

Libraries are a piece of code that is shared from other developers in a way that we can call functions defined and declared there by simply including them at the time of cross compiling our piece of source code or by including header files before main in our program. Libraries are defined by lib prefix in linux and they contain function definitions .

In linux all header files containing prototypes of the functions defined in library files or in source files are present in usr/include directory while library files are present in /usr/lib , /usr/lib32 , /usr/libexec , /usr/libx32

To use a library in our source code from it's definition present in a file containing (lib) prefix we just need to mention it's absolute path with the gcc compiler command in terminal window before our source or program code file name  and then mention it's declaration file also known as function prototype in our source code by using #include preprocessor directive for e.g.

Command Format In Terminal (Absolute Path Approach) : 

gcc (-compiler flags or options i.e. Wall) programfile.c absolutepathoflibrary\libnameoflibfile.ext -o nameofprogram

Example : 

gcc -std=c11 -Wall -Wextra -fmax-errors=10  program.c usr/lib32/libm.a -o program   (Here libm.a is the library file)

Here -std  an option gcc flag sets the -std flag to set the C standard (in this case c11) This will warn us if we break c11 standard rules!
     -Wall flag is used to turn on additional warnings about potential bad code practices.
     -Wextra flag is used to turn on more warnings than the -Wall flag alone will activate.
     -fmax-errors=10 flags indicates listing of maximum of 10 errors
     -o option flag sets the compiler optimiztion level
Here nameofprogram is the name of binary file that will be produced from programfile.c source file alongwith linking and compiling of library file from it's absoulte path by the gcc compiler. 

We can also link a external library to our source code without mentioning the complete path of library file through relative addressing of relevant library function definition file by following command in terminal window :

Command Format In Terminal (Relative Path Approach) : 

gcc (-compiler flags or options i.e. Wall,std,Wextra -fmax-errors) programfile.c -l(suffixafterlib) -o nameofprogram

Example : 

gcc -std=c11 -Wall -Wextra -fmax-errors=10 program.c -lm -o program    ("Here in -lm 'm' is the suffix word that came after lib prefix of library file libm.a)

Here -std  an option gcc flag sets the -std flag to set the C standard (in this case c11) This will warn us if we break c11 standard    rules!
     -Wall flag is used to turn on additional warnings about potential bad code practices.
     -Wextra flag is used to turn on more warnings than the -Wall flag alone will activate.
     -fmax-errors=10 flags indicates listing of maximum of 10 errors
     -o option flag sets the compiler optimiztion level
In this way library files are automoatically linked by the linker with our source code as linker finds these files in defaulat location i.e. usr/lib/ on our linux system.

Hence we can link function definitions from a library file by either providing absolute path or relative path of a library file 
with compiler command in terminal window.

To provide function prototypes and declarations we just need to mention relevant header file of our library that we want to use by using #include preprocessor directive in our code shown as : 

Syntax Written In Text : 
#include<name of header file>

So to use  code from external sources we need both function definition and declaration files and both are required to be linked and comiled by the compiler to generate required source code file containing the complete code.


                                          ----------- Using Multiple Libraries In C--------------------

To use multiple libraries in C while using gcc compiler in linux we need to follow the following format of command in terminal : 

Command Format In Terminal (Absolute Path Approach) : 
gcc (-compiler flags or options i.e. Wall)  absolutepathoflibrary1\libnameoflibfile.ext absolutepathoflibrary2\libnameoflibfile.ext programfile.c -o nameofprogram

Example : 

gcc -std=c11 -Wall -Wextra -fmax-errors=10 usr/lib32/libcurses.a  usr/lib32/libmenu.so program.c -o program   (Here libm.a is the library file)

Here -std  an option gcc flag sets the -std flag to set the C standard (in this case c11) This will warn us if we break c11 standard    rules!
     -Wall flag is used to turn on additional warnings about potential bad code practices.
     -Wextra flag is used to turn on more warnings than the -Wall flag alone will activate.
     -fmax-errors=10 flags indicates listing of maximum of 10 errors
     -o option flag sets the compiler optimiztion level

Command Format In Terminal (Relative Path Approach) : 

gcc (-compiler flags or options i.e. Wall,std,Wextra -fmax-errors) -lsuffixnameoflibfile1 -lsuffixnameoffile2 programfile.c -o nameofprogram

In this way library files are automoatically linked by the linker with our source code as linker finds these files in defaulat location i.e. usr/lib/ on our linux system.

Example : 

gcc -std=c11 -Wall -Wextra -fmax-errors=10 -lcurses.a -lmenu program.c -o program   ("Here in -lcurses and -lmenu 'curses' and menu are the suffix words that came after lib prefixes of library files libcurses.a libmenu.so            )

Here -std  an option gcc flag sets the -std flag to set the C standard (in this case c11) This will warn us if we break c11 standard rules!
     -Wall flag is used to turn on additional warnings about potential bad code practices.
     -Wextra flag is used to turn on more warnings than the -Wall flag alone will activate.
     -fmax-errors=10 flags indicates listing of maximum of 10 errors
     -o option flag sets the compiler optimiztion level
     
So we can compile similarly more than 1 or 2 libraries with our source code by either mentioning their absolute paths before the name of our source code file with .c extension or through much easier relative path approach while it should be noted that relevant function prototype header files would be included in source code by using #include preprocessor directive in whatever method of linking library files we choose i.e either relative or absolute. It should be noted that library files stdlib and stdio are automoatically linked and compiled by the compiler therefore not required to be linked at the time of compilation and not indicated with gcc command of compilation in terminal window.


                           -----------------Unit 7.2 : Modularization Libraries and Makefiles---------------------
                                         
----GCC Details-----
                                         
When we execute gcc compiler command in terminal then behind several processes happen by : 

Preprocessor : Inserts Header file code in our main source code file and then passed to next stage of compilation.
Compiler : Takes input of source code containing header file codes and produces an assembly language equivalent source code file and then this file is passed to assembler.
Assembler : Assembler generates machine code file from the assembly code that was passed to it from compiler.

Linker : Combines main source code machine language file passed from assembler with library files and produces a single executable file.

All of the above steps by simply invoking and executing gcc command in terminal window.

                            
-----Generating an Object Code From C Source Code--------

To use gcc compiler for generating an object code from c source code we use following command thus inoking the assembler
Command Format 
gcc (-compiler flags or options i.e. Wall,std,Wextra -fmax-errors) -c -o objectfilename.o sourcefilename.c          

Command Example
gcc -c -o program.o program.c
Here :
      -c is flag informing the compiler to generate only machine readable object code not the executable one.
                                                      
------Generating an Executable From Object Code----------

To generate an executable file from object code we type following command in terminal and invoke the linker

Command Format 
gcc -o filenametobegenerated objectcodefilename.o

Command Example
gcc -o program program.o


-------Object File-------

Sometimes we need to split our main program source files into several ones like one file containing one function code and another one with other function codes to do this division we need to create two files one containing the function definitions in relevant source code file with .c extension and the other having function prototypes with in a header file with .h extension and we need mention function prototype header file in our main program source code file by using #include preprocessor directive as #include "nameofheaderfile" here we are not using angular brackets as they will make the compiler to look for relevant header file in default include directory which on linux is /usr/include while without these brackets compiler will consider current directory for it however we can also mention absoulte path of it if required.  Afer this we need to create relevant object files from main source code file with .c extension and of function definition file with the same .c extension

Command Formwat For Linking Two Object Files

gcc -o executablefilename objectfile1name.o objectfile2name.o     Here executable file  is made by linking both object files. 

Example

gcc -o program program.o weatherstats.o

We can also link function object file with our main program also by 

gcc (-compiler flags or options i.e. Wall,std,Wextra -fmax-errors) objectfilename.o sorucecodefile.c -o executablefile
Example : 
gcc -std=c11 -Wall -Wextra -fmax-errors=10 weatherstats.o program.c -o program


----Modify Object Files------

Whenever we want to make a change either in our main source code file or in other function code file we have to recompile and link using gcc compiler that is if the change has been made in a function code then we have to recompile it to generate it's object file from it's source code and then relink it with our main source code file to form a signle executable file for e.g : 

If program.c is our main source code file and weatherstats.c is our function code if we make a change in program.c independent of function code then we have to recompile it as : gcc -Wall -c -o program.o program.c

If we make a change in weathestats.c file then again we have to recomile it and produce it's object file and then link it with main source code file as : 
gcc -Wall -c -o weatherstats.o weatherstats.c
gcc -Wall weatherstats.o program.o -o program

If we make changes in both main source code and function file then we have to recompile and relink both of them as : 
gcc -Wall -c -o program.o program.c
gcc -Wall -c -o weatherstats.o weatherstats.c 
gcc -Wall weatherstats.o program.o -o program

We dont require other compiler flags except of wall when generating an object file from a source code however we will need them when compiling a source code with or without other object code file to genrate a executable file.
Thus this approach becomes very cumbersome and tedious if we have multiple source code files containing different function definitions and other program statements as for every small change we have to again and again perform the steps of recompilation and relinking in order to solve this issue of recomilation and linking of multiple source code files we will use makefile system concept.


--------Creating and Using Makefile-----------

To use makefile for automating the build process and get rid of executing and repeating process of compilation and linking we need to follow preceding makefile structure when creating it and using it.

In a make file we need to type what we want to produce: name of ingredients or dependecies or what's needed to do so
(tab space)how to produce 

Example : 
If we want to produce an executable program from program.o and weatherstats.o files then we will write in makefile as 

program: program.o weatherstats.o
	gcc -std=c11 -Wall -Wextra -fmax-errors=10 program.o weatherstats.o -o program
	
Similarly to produce program.o file from program.c and weatherstats.h we'll write in makefile as :

program.o: program.c weatherstats.h
	gcc -std=c11 -Wall -Wextra -fmax-errors=10 -c program.c -o program

To produce weatherstats.o object filefile from weatherstats.c we will do 

weatherstats.o: weatherstats.c
	gcc -std=c11 -Wall -Wextra -fmax-errors=10 -c weatherstats.c -o weatherstats.o

Example : Comibing All Instructions In A Single Makefile

Now we can combine all above instructions in a single make file so that all execute in squence and automatically upon the execution of make command in terminal that is :-

program: program.o weatherstats.o
	gcc -std=c11 -Wall -Wextra -fmax-errors=10 program.o weatherstats.o -o program

program.o: program.c weatherstats.h
	gcc -std=c11 -Wall -Wextra -fmax-errors=10 -c program.c -o program.o

weatherstats.o: weatherstats.c
	gcc -std=c11 -Wall -Wextra -fmax-errors=10 -c weatherstats.c -o weatherstats.o


Thus "make" build and utility system enables us to get rid of time consuming recomiling and linking when we have multiple files of source
spanning to hundereds of functions and other program statement files.


There is another shorter abbreviated version of make file as well as elaborated below :

#define the C Compiler to use 
CC	= gcc
#define compiler flags
CFLAGS	= -std=c11 -Wall -fmax-errors=10 -Wextra
#define library paths in addition to /usr/lib
LFLAGS	= 
#define libraries to use
LIBS	=
#define the object files that this project needs
OBJFILES	= program.o weatherstats.o
#define the name of executable file
MAIN	= program

# all of the below is generic - are typically only adjusts the above

all: $(MAIN)

$(MAIN): $(OBJFILES)
	$(CC) $(CFLAGS) -o $(MAIN) $(OBJFILES)
	
%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<
	
clean:
	rm -f $(OBJFILES) $(MAIN)		


In the above makefile much smaller version here : # symbol represents start of comment, used for putting up comments
                                                  $ symbol before variables such as MAIN,OBJFILES,CC,CFLAGS indicates and refers to 
                                                    values held by these variables as defined previoulsy in the start of make file.
While the statements containing $ sign are equal to the ones defined earlier except that they are a part of this reduced make file structure.
The line all: $(MAIN) 
says that target all whatever is indicated by MAIN variable and here it's program executable file which further depends on object files defined by OBJFILES variable.

In The line : %.o: %.c 
	$(CC) $(CFLAGS) -c -o $@ $<                            
   
This %.o: %.c indicates how are we going to generate object files from source files and on what files the object files depends.
   Notations %.o is for object file
             %.c is for source code files                                                    
While in  $(CC) $(CFLAGS) -c -o $@ $<    sign $@ and $< are funny constructs here just put them as it is in a makefile 

The last line                                                              
clean:
	rm -f $(OBJFILES) $(MAIN)        

deletes all object files and executable files with names defined by their respective variable values earlier.



----Run a program with Makefile-----

We can also run a program through makefile by including this line among compilation and linking statements in the last  i.e.

launch: name of executable
	./nameofexecutable

example : - 

launch: program
	./program


It should be noted that gcc compiler only recompiles those source and object files that were changed while others are not.


------------Static Library----------------

A single library or multiple libraries are consist of a collection of object files liked together by linker to form a library file defined in linux with .a extension. A static library is created in following steps : 

At first function code source files are compiled into object files with .o extension.
In Second step these object files are bundled together in an archive library file with .a extension.
In third step this library will be linked to our main source code by the linker in a way that only those functions are extracted from library file that are used and neccessary for our main source code execution.  




To create a static library with .a extension we use terminal command ar with parameters rcs alongwith libraryfilename as describe below

Command format : ar rcs libname.a objectfile1.o or objfile1.o objfile2.o  ........    
Where lib is the prefix before library file name .
Example:
ar rcs libweather.a weatherstats.o       Here ar stands for archive 
                                              r  stands for replace in case certain .o file is part of current library being created  
                                              c  stands for creative      
  		                               s  stands for create an index for faster access.

  
Later on we can link created library file with our main source code either through absolute path or relative path approach as 

To link by absolute path we type in terminal as gcc -c libweather.a program.o -o program 

To link by relative path our newly created library we type in terminal as gcc -c -L. -lweather.a program.o -o program 

We used -L. notation to inform the linker to find and add this library automatically instead outside of defalut location of /usr/lib as
we have created it and it doesn't exist in /usr/lib folder. 


----Static vs Dynamic Libraries Or (Static Linking Vs Dynamic Linking) In C----


Static Library or Static Linking

i).   Linker finds all used functions(sqrt(),printf() e.t.c) codes and puts them together into our single executable file.
ii).  Library files have extension .a in linux and .lib in windows.
iii). Generated Executable is a larger file and needs more storage space. 
iv).  If their is change in library file with .a extension then still executable does not automatically updated and needs to be relinked
      with library file.
v).   If library becomes incompataible then generated executable will still run unless it's not relniked with updated library file code.
vi).  Static library access is faster as compared with that of dynamic library access time. 


Dynamic Library or Dynamic LInking

i).   Linked dynamically at run time by the os,every program that accesses the library uses the same copy.
ii).  Library files  have the extension .so in linux and .dll in windows.
iii). Executable only contains the name of a link to the library.
iv).  If library file changes then executable will contain newer library file updated code. 
v).   If library file becomes incompatabile with our main source code then previously generated executable won't run.
vi).  Dynamic querying of symbols takes time so dynamic library files access is slower.


Library                               Static                                           Dynamic          

Compiled Command 	       gcc -c part1.c part1.o                          gcc -c -fpic part1.c part1.o    (fpic is compiler flag)
To Create Library             ar rcs libmylib.a part1.o part2.o               gcc -shared -o libmylib.so part1.o part2.o
Compile main program          gcc -c program.c -o program.o                   gcc -c program.c -o program.o
To link with main program     gcc -o program program.o -L. -lmylib            gcc -o program program.o -L. -lmylib
                                         or                                   Add library path to environment variable  
	                      gcc program.c libname.a -o program              export LD_LIBRARY_PATH:$PWD:$LD_LIBRARY_PATH  
	                                 or
	                   gcc (compiler-flags) program.c -L. -lmylib -o program           
	In above comparative scenarios of both static and dynamic we have assumed that library files are placed in
	the same path or folder where main program executbale is present.
	
	

libweather.a: weatherstats.o weatherio.o
        ar rcs libweather.a weatherstats.o weatherio.o


                                            ----------Ultimate Makefile---------------

It appears to me that Makefiles can be customized with own variable names having own values and with our own equations (consisting of variable names with $ notation) for performing a certain task for example in the follwoing two scenarios i am using self created versions of two makefiles one for linking a static library using absolute path approach and another by relative path approach.



-----------Absolute Path Approach Format Makefile---------- 

# define the C compiler to use
CC       = gcc

#define library compilation command to use
LC       = ar 

#define library compilation flags
LCFLAGS   = rcs

# define comipler flags
CFLAGS   = -std=c11 -Wall -fmax-errors=10 -Wextra

# define library name to compile and use
LIBN = libweather.a

# define the object files that this project needs
OBJ0 = program.o  
OBJ1 = weatherstats.o
OBJ2 = weatherio.o

#define name of src files to use 
SRC0 = program.c
SRC1 = weatherstats.c
SRC2 = weatherio.c

# define the name of the executable file
MAIN     = program

# all of the below is generic - one typically only adjusts the above

$(MAIN): $(OBJ0) $(LIBN)
	$(CC) $(CFLAGS) $(OBJ0) $(LIBN) -o $(MAIN)
	
$(LIBN): $(OBJ1) $(OBJ2)
	$(LC) $(LCFLAGS) $(LIBN) $(OBJ1) $(OBJ2)  

$(OBJ0): $(SRC0)
	$(CC) $(CFLAGS) -c $(SRC0) -o $(OBJ0)

$(OBJ1): $(SRC1)
	$(CC) $(CFLAGS) -c $(SRC1) -o $(OBJ1) 

$(OBJ2): $(SRC2)
	$(CC) $(CFLAGS) -c $(SRC2) -o $(OBJ2)

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

launch: program
	./program

clean:
	rm -f *.o $(MAIN) $(P1)



--------------Relative Path Approach Makefile Format------------

# define the C compiler to use
CC       = gcc

#define library compilation command to use
LC       = ar 

#define library compilation flags
LCFLAGS   = rcs

# define comipler flags
CFLAGS   = -std=c11 -Wall -fmax-errors=10 -Wextra

# define library paths inherst addition to /usr/lib
LFLAGS   = -L. 

# define libraries to use
LIBS = -lweather

# define library name to compile and use
LIBN = libweather.a

# define the object files that this project needs
OBJ0 = program.o  
OBJ1 = weatherstats.o
OBJ2 = weatherio.o

#define name of src files to use 
SRC0 = program.c
SRC1 = weatherstats.c
SRC2 = weatherio.c

# define the name of the executable file
MAIN     = program

# all of the below is generic - one typically only adjusts the above

$(MAIN): $(OBJ0) $(LIBN)
	$(CC) $(CFLAGS) $(OBJ0) $(LFLAGS) $(LIBS) -o $(MAIN)
	
$(LIBN): $(OBJ1) $(OBJ2)
	$(LC) $(LCFLAGS) $(LIBN) $(OBJ1) $(OBJ2)  

$(OBJ0): $(SRC0)
	$(CC) $(CFLAGS) -c $(SRC0) -o $(OBJ0)

$(OBJ1): $(SRC1)
	$(CC) $(CFLAGS) -c $(SRC1) -o $(OBJ1) 

$(OBJ2): $(SRC2)
	$(CC) $(CFLAGS) -c $(SRC2) -o $(OBJ2)

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

launch: program
	./program

clean:
	rm -f *.o $(MAIN) $(P1)


                 ---------------------------- Pass arguments to a program from the command line -------------------------
                 
                 
The arguments passed to main function or thread of our program are similar to passing or sending values to functions either passed by reference or by value from one function to another or through main thread to a function as we studied earlier.

Syntax For Passing Arguments In Linux Terminal : 
./nameofexecutable -argument1 -argument2 .......      or ./nameofexecutable argument1 argument2

Syntax And Format of our main thread insource file : 
return_type main(int argc,char *argv[])          or return_type main(int argc, char **argv)      or return_type(int argc, char argv[][])

                   argc counts the number of arguments passed by the user to program from terminal, it will be +1 if we don't pass any
                   argument because by default first argument will always be name of program that is being executed in addition to the
                   number of arguments passed.
                   
                   char *argv[] is the array of pointers where each pointer points to memory locations storing the passed arguments 
                   having character data type and the length or size or number of indexes of these array of pointer is defined by the
                   compiler at compile time. 
                   
                   char argv[][] is a multidimensional array of pointers where every single pointer points to memory locations with
                   stored passed arguments and similary it's size (rows,columns) are defined by compiler at compile time.  
                   
                   char ** argv means that argv contains an address to an array and each cell or index of this array further contains 
                   address to an array of characters

---Use arguments passed to a program from command line--

As we know from our previous discussion that parameter char *argv[] in main thread is an array of pointers with character data type pointing towards memeory locations storing character data and each of this character data is stored as ASCII code in memory now to perform operation on these stored equivalent ASCII codes of each character we need to convert these ASCII codes into relevant mathematical data types such integer,float , double and e.t.c according to requirement and we do this by calling functions atoi (ASCII  to integer and atof(ASCII to float) provided in stdlib library. 

Morevover to access string of the elements of data in char *argv we can do it either by dereferencing or by using matrix notation i.e.

*(argv+index) or simply argv[index] However to access each single element we do it by *(*(argv+index)) or argv[row_index][column_index]
as we know argv is a multidimensional array of pointers.

Example Used Vim : 
#include <stdio.h>
#include <stdlib.h> // for atoi and atof
#include <string.h> // for strcmp

int main(int argc, char *argv[]) {
    int i, compare, wholeNumber;
    double decimalNumber;
    
    printf("I have %d arguments from the command line: \n", argc);
    for (i = 0; i<argc; i++) {
        printf("Argument %d: %s\n", i, argv[i]);
    }
    
    if (argc == 4) {
        compare = strcmp(argv[1], "-e");
        if (compare ==0) {
            printf("argv[1] equals -e \n");
        } else {
            printf("argv[1] does not equal -e \n");
        }
        wholeNumber = atoi(argv[2]);
        printf("%s as an integer is %d.\n", argv[2], wholeNumber);
        decimalNumber = atof(argv[3]);
        printf("%s as a double is %lf.\n", argv[3], decimalNumber);
    }
    return 0;
}



















                               






