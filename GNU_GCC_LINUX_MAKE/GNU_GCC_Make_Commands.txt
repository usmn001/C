*****************GNU Compiler and Linker Commands and Flags**********************

gcc --version : provides information about version of gcc
which gcc  : location of gcc installed
man gcc : provides manual of gcc

gcc -flags src.c : 

-v : outputs more logging information 
-S : outputs assembly language file generated by compiler.
-D : for defining a macro for e.g. 
     gcc-DMacroname [optionflags] [sourcefiles] -o outputfile

-----------------GCC Linker Flags---------------------

-map                    : For generating a memory map file
-T                      : Specifies linker script name
-o                      : place the linker output in specified file
-O<#>                   : level of optimizations from [#=O-3] (-O0,-O1,-O2,-O3)
-Os                     : Optimize for memory use
-z stacksize = [SIZE]   : Amount of stack space to reserve
-shared                 : Produce a shared library (dynamic linking)
-l[LIB]                 : Link with library
-L[DIR]                 : Include following library path
-WI, <OPTION>           : Pass option to linker from compiler
-Xlinker <OPTION>      : Pass option to linker from compiler  


-------------Generating map from Linker---------------------
gcc src.c - o executable_name -Xlinker -map=mapfilename.map


-------------Generating Preprocessed Output From File-----------

gcc -E -o src.c src.o


--------------GCC Architecture Specific Compiler Flags-------------------

-mcpu = [NAME]           : Where NAME is target processor for e.g.
                           (cortexm0plus)
-march = [NAME]          : For TARGET ARM Architecture (ex : armv7-m,thumb)
-mtune = [NAME]          : For TARGET ARM Processor (ex : cortex-moplus)
-mthumb                  : Generate Code in Thumb states (ISA)
-marm                    : Generate code in ARM state (ISA)
-mthumb-interwork        : Generate code supporting calling between ARM and
                           thumb(ISA)
-mlittle-endian          : Generate code for little Endian Mode
-mbig-endian             : Generate code for Big Endian Mode

----------------GCC Compiler Flags-------------
-c                       : Compile and Assemble File, Do not link
-o <FILE>                : Compile, Assemble and Link to OUTPUT_FILE
-g                       : Generate debugging information in Executable
-Wall                    : Enable All Warning Messages
-Werror                  : Treat All Warnings as Errors
-I<DIR>                  : Include this <DIR> to look for header files.
-std = STANDARD          : For specifying which C standard to use for e.g.(c89,c99)
-v                       : For generating versbose output.


 


-----Generating an Object Code From C Source Code--------

gcc (-compiler flags or options i.e. Wall,std,Wextra -fmax-errors) -c -o objectfilename.o sourcefilename.c          

Command Example
gcc -c -o program.o program.c
Here :
      -c is flag informing the compiler to generate only machine readable object code not the executable one.
                                                      
------Generating an Executable From Object Code----------

To generate an executable file from object code we type following command in terminal and invoke the linker

Command Format 
gcc -o filenametobegenerated objectcodefilename.o

Command Example
gcc -o program program.o



---------------------Make File System Variables-------------------







