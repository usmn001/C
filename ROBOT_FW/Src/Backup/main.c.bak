/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2015 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"

/* USER CODE BEGIN Includes */
//#include "stdio.h"
#include "3_I2C1_TMP006.h"
//#include "4_5_I2C1_Si7020.h"
//#include "8_UART1.h"
//#include "10_SPI2_NRF24L01.h"
//#include "12_FMC_SDRAM.h"
#include "15_lIGHTS.h"
//#include "19_UART2_GPS.h"
//#include "18_I2C1_MPU9150.h"
//#include "17_DAC_Audio.h"
//#include "14_IR_Sensor.h"
struct __FILE { int handle; }; 
FILE __stdout; 
FILE __stdin; 
int fputc(int c, FILE *f) 
{ 
ITM_SendChar(c);
return (c);
}

 



//#include "SPI3_LCD.h"
//#include "7_I2C2_OV7670.h"



/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
DAC_HandleTypeDef hdac;

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

SDRAM_HandleTypeDef hsdram1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/


uint16_t  si_eid1 = 0;
uint16_t  si_eid2 = 0;
uint8_t  si_firm = 0;
uint8_t  si_heat = 0;
float    si_hum = 0;
float    si_temp = 0 ;
float    si_temp_r = 0 ;

uint8_t cam_pid_msb = 0;
uint8_t cam_pid_lsb = 0; 
uint8_t cam_gain = 0;
uint8_t cam_blue = 0;
uint8_t cam_red = 0; 

uint16_t tmp006_dev_id1 = 0;
uint16_t tmp006_man_id1 = 0;
uint16_t tmp006_temp1 = 0; 
uint16_t tmp006_sens1 = 0;

uint16_t tmp006_dev_id2 = 0;
uint16_t tmp006_man_id2 = 0;
uint16_t tmp006_temp2 = 0; 
uint16_t tmp006_sens2 = 0;


uint8_t nrf_config = 0;
uint8_t nrf_en_aa = 0; 
uint8_t nrf_en_rxaddr = 0;
uint8_t nrf_setup_aw = 0;
uint8_t nrf_setup_retr = 0; 
uint8_t nrf_rf_ch = 0; 
uint8_t nrf_rf_setup = 0;
uint8_t nrf_status = 0;
uint8_t nrf_observe_tx  = 0; 

uint8_t gps_sid = 0;


uint64_t lcd_man_id =0;
uint64_t lcd_dri_ver = 0;
uint64_t lcd_dri_id = 0;
uint64_t lcd_mem_acc_con = 0;
uint64_t lcd_disp_pow_mod = 0;
uint64_t lcd_rddsdr = 0; 
uint64_t lcd_disp_stat = 0;
uint64_t lcd_mem_read = 0;

uint8_t   acc_smprt_div = 0;
uint8_t   acc_config = 0;                    
uint8_t   acc_gyro_config = 0;
uint16_t  ACCEL_XOUT_H = 0;
uint8_t   ACCEL_XOUT_L = 0;
uint16_t  ACCEL_YOUT_H = 0;
uint8_t   ACCEL_YOUT_L = 0;
uint16_t  ACCEL_ZOUT_H = 0;
uint8_t   ACCEL_ZOUT_L = 0;
uint16_t  GYRO_XOUT_H  = 0;
uint8_t   GYRO_XOUT_L  = 0;
uint16_t  GYRO_YOUT_H  = 0;
uint8_t   GYRO_YOUT_L  = 0;
uint16_t  GYRO_ZOUT_H  = 0;
uint8_t   GYRO_ZOUT_L  = 0;





uint8_t  acc_who_am_i = 0;                   
uint8_t  acc_pwr_mgmt_1;                 
uint8_t  acc_pwr_mgmt_2;                 




uint32_t DAC_Out = 0 ;



extern uint32_t sd_rb;       // READ BUFFER FOR SD CARD

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_DAC_Init(void);
static void MX_FMC_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_SPI2_Init(void);
static void MX_SPI3_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM6_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DAC_Init();
  MX_FMC_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_SPI2_Init();
  MX_SPI3_Init();
  MX_TIM3_Init();
  MX_TIM6_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
   
	 
	 // TMP006 FUNCTIONS
  
	/***********************************/
	
	tmp006_man_id1 = r_man_id1();
	tmp006_dev_id1 = r_dev_id1();
	tmp006_man_id2 = r_man_id2();
	tmp006_dev_id2 = r_dev_id2();
	tmp006_temp1 = r_temp1();
	tmp006_sens1 = r_sens1();
  tmp006_temp2 = r_temp2();
	tmp006_sens2 = r_sens2();
	
	/**************************************/
	
	

	

	
	

/*************** NRF2401L  FUNCTIONS *****************

w_config(0x04);
nrf_config     = r_config();    // READ CONFIGURATION REGISTER OF NRF24L01 
nrf_en_aa      = r_en_aa();     // READ ENABLE AUTO ACKNOWLEDGEMENT REGISTER OF NRF24L01 
nrf_en_rxaddr  = r_en_rxaddr(); // READ ENABLED RX ADDRESSES OF NRF24L01
nrf_setup_aw   = r_setup_aw();  // READ SETUP OF ADDRESS WIDTHS OF NRF24L01
nrf_setup_retr = r_setup_retr();// READ SETUP OF AUTOMATIC RETRANSMISSION REGISTER OF NRF24L01 
nrf_rf_ch      = r_rf_ch();     // READ RF CHANNEL REGISTER OF NRF24L01
nrf_rf_setup   = r_rf_setup() ; // READ RF SETUP REGISTER OF NRF24L01
nrf_status     = r_status();    // READ STATUS REGISTER OF NRF24L01
nrf_observe_tx = r_observe_tx();// READ TRANSMIT OBSERVE REGISTER OF NRF24L01 
r_rpd        ();                // READ RECEIVED POWER DETECT REGISTER OF NRF24L01
r_rx_addr_p0 ();                // READ RECEIVED DATA PIPE 0
r_rx_addr_p1 ();                // READ RECEIVED DATA PIPE 1
r_rx_addr_p2 ();                // READ RECEIVED DATA PIPE 2
r_rx_addr_p3 ();                // READ RECEIVED DATA PIPE 3
r_rx_addr_p4 ();                // READ RECEIVED DATA PIPE 4
r_rx_addr_p5 ();                // READ RECEIVED DATA PIPE 5
r_tx_addr    ();                // READ RECEIVED TRANSMIT REGISTER OF NRF24L01
r_rx_pw_p0   ();                // READ NUMBER OF BYTES IN RX PAYLOAD IN DATA PIPE 0 OF NRF24L01
r_rx_pw_p1   ();                // READ NUMBER OF BYTES IN RX PAYLOAD IN DATA PIPE 1 OF NRF24L01
r_rx_pw_p2   ();                // READ NUMBER OF BYTES IN RX PAYLOAD IN DATA PIPE 2 OF NRF24L01
r_rx_pw_p3   ();                // READ NUMBER OF BYTES IN RX PAYLOAD IN DATA PIPE 3 OF NRF24L01
r_rx_pw_p4   ();                // READ NUMBER OF BYTES IN RX PAYLOAD IN DATA PIPE 4 OF NRF24L01
r_rx_pw_p5   ();                // READ NUMBER OF BYTES IN RX PAYLOAD IN DATA PIPE 5 OF NRF24L01

************************************************************************************************/

/********** SDRAM FUNCTIONS******************

uint32_t data[] = {0x0A,0x0B,0x0C,0x0D};
write_sd_mem((uint32_t*)data);
read_sd_mem();

*******************************************/

/*************UART SERIAL CAMERA INTERFACE*******************

uint8_t buff[] ="hello";
uart1_send((uint8_t*)buff);

**********************************************************/










/*************ACCELROMETER/GYROSCOPE FUNCTIONS***********


mpu_stat();
acc_who_am_i     =  r_who_am_i(); 
slp_mod_of();
w_smprt_div(0x18);
acc_smprt_div    =  r_smprt_div();
w_config(0x18);
acc_config       =  r_config();
w_gyro_config(0x18);
acc_gyro_config  =  r_gyro_config();
acc_pwr_mgmt_1   =  r_pwr_mgmt_1();
acc_pwr_mgmt_2   =  r_pwr_mgmt_2();
ACCEL_XOUT_H     =  r_MPU9150_ACCEL_XOUT_H();
ACCEL_XOUT_L     =  r_MPU9150_ACCEL_XOUT_L();
ACCEL_YOUT_H     =  r_MPU9150_ACCEL_YOUT_H();
ACCEL_YOUT_L     =  r_MPU9150_ACCEL_YOUT_L();
ACCEL_ZOUT_H     =  r_MPU9150_ACCEL_ZOUT_H();
ACCEL_ZOUT_L     =  r_MPU9150_ACCEL_ZOUT_L();
GYRO_XOUT_H      =  r_MPU9150_GYRO_XOUT_H();
GYRO_XOUT_L      =  r_MPU9150_GYRO_XOUT_L();
GYRO_YOUT_H      =  r_MPU9150_GYRO_YOUT_H();
GYRO_YOUT_L      =  r_MPU9150_GYRO_YOUT_L();
GYRO_ZOUT_H      =  r_MPU9150_GYRO_ZOUT_H();
GYRO_ZOUT_L      =  r_MPU9150_GYRO_ZOUT_L();



*********************************************************/

/******************LCD FUNCTIONS****************************
Lcd_Ton();                              //LCD TOUCH CONTROLLER CSX = 1
Lcd_on();
Lcd_Set();
Lcd_Bl_On();
lcd_man_id        =    Lcd_man_id_r();
lcd_mem_acc_con   =    Lcd_mem_acc_con_r();
Lcd_mem_acc_con_w(0x0020);
lcd_mem_acc_con   =    Lcd_mem_acc_con_r();
//lcd_dri_ver       =    Lcd_dri_ver_r();
//lcd_dri_id        =    Lcd_dri_id_r();
Lcd_normal_mode_on();
lcd_dri_ver       =    Lcd_dri_ver_r();
lcd_dri_id        =    Lcd_dri_id_r();
lcd_disp_stat     =    Lcd_disp_stat_r();
lcd_mem_acc_con   =    Lcd_mem_acc_con_r();
lcd_disp_pow_mod  =    Lcd_disp_pow_mod_r();
lcd_rddsdr        =    Lcd_rddsdr_r();  
Lcd_column_addr_w(0x01,0x00,0x02,0x00);
Lcd_page_addr_w(0x01,0x00,0x02,0x00);
Lcd_mem_w(0x02);

lcd_mem_read=Lcd_mem_r();
***************************************************************/



/************** OV7670 FUNCTIONS***************

Cam_Pwup();
Cam_Set();
Cam_Stat();
cam_pid_msb = R_Cam_PID();
//cam_pid_lsb = Cam_Ver();
//cam_pid_msb = r_Cam_Pid(); 
//set_OV7670reg();
//cam_pid_msb = r_Cam_Pid();
**********************************************/











printf("  PROJECT : LAWN MOWING ROBOT \n ");
all_lights_off();

	//  SI7020 FUNCTIONS
	
	/***********************************
	//rst_si7020();
	//rst_si7020();
 	//si_stat();
	si_firm     =    r_firm_v();    // Command For Reading Firwamre Version
 	si_eid1     =    r_eid1();      // Command For Reading 1st Electronic ID Second Byte
	si_eid2     =    r_eid2();      // Command For Reading 2nd Electronic ID Second Byte
	//si_heat     =    r_heat();      // Command For Reading Heater Register
  si_hum      =    r_hum1();      // Command To Measure Relative Humidity ,Hold Master Mode 
  si_temp     =    r_temp11();    // Command To Measure Temperature  , Hold Master Mode
	si_temp_r   =    r_temp33();    // Command For Reading Temperature , From Previous RH Measurement
	
  **************************************/









/*************UART GPS FUNCTIONS*************************


//GPS_RST();
//HAL_Delay(1000);
//GPS_SET();
//HAL_Delay(10000);
GPS_Config_Out_NMEA();
GPS_Config_Out_BINARY();
GPS_Config_Pos_Update_Rate();
GPS_Config_Bin_Meas_Data_Out(); 
GPS_QRCNS();
GPS_QBDOS(); 
GPS_QSID();                     // GPS : QUERY SOFTWARE VERSION ID  
//GPS_Query_Pos_Update_Rate();
GPS_RCV_DATA();


**********************************************************/


/*************DAC FUNCTIONS**********************

Amp_En();
DAC_Start();

***************************************/

/**********IR Sensor Functions********

Start_Timer3_IR1();
Start_Timer3_IR2();

*****************************/





  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* DAC init function */
void MX_DAC_Init(void)
{

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
  HAL_DAC_Init(&hdac);

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);

    /**Configure Triangle wave generation on DAC OUT2 
    */
  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_2, DAC_TRIANGLEAMPLITUDE_4095);

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
  HAL_I2C_Init(&hi2c1);

}

/* I2C2 init function */
void MX_I2C2_Init(void)
{

  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
  HAL_I2C_Init(&hi2c2);

}

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
  hspi2.Init.CRCPolynomial = 10;
  HAL_SPI_Init(&hspi2);

}

/* SPI3 init function */
void MX_SPI3_Init(void)
{

  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLED;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
  hspi3.Init.CRCPolynomial = 10;
  HAL_SPI_Init(&hspi3);

}

/* TIM3 init function */
void MX_TIM3_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 16000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 19;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

  HAL_TIM_IC_Init(&htim3);

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sSlaveConfig.TriggerFilter = 0;
  HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1);

  HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2);

}

/* TIM6 init function */
void MX_TIM6_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 5;
  HAL_TIM_Base_Init(&htim6);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);

}

/* USART1 init function */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart1);

}

/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);

}

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);

}
/* FMC initialization function */
void MX_FMC_Init(void)
{
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
  SdramTiming.ExitSelfRefreshDelay = 16;
  SdramTiming.SelfRefreshTime = 16;
  SdramTiming.RowCycleDelay = 16;
  SdramTiming.WriteRecoveryTime = 16;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 16;

  HAL_SDRAM_Init(&hsdram1, &SdramTiming);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOE_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();
  __GPIOF_CLK_ENABLE();
  __GPIOH_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOG_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();

  /*Configure GPIO pins : LCD_RST_LCD_Pin SPI_3_CS_TOUCH_Pin SPI_3_CS_LCD_L_Pin */
  GPIO_InitStruct.Pin = LCD_RST_LCD_Pin|SPI_3_CS_TOUCH_Pin|SPI_3_CS_LCD_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : AMP_CTR_LCD_Pin */
  GPIO_InitStruct.Pin = AMP_CTR_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(AMP_CTR_LCD_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PD_11_GPIO_Pin LCD_BL_LCD_Pin LED_B_Pin LED_R_Pin 
                           SPI_2_CS_RF_Pin */
  GPIO_InitStruct.Pin = PD_11_GPIO_Pin|LCD_BL_LCD_Pin|LED_B_Pin|LED_R_Pin 
                          |SPI_2_CS_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : CAM_RST_Pin */
  GPIO_InitStruct.Pin = CAM_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : THRM_SEN_A_DRDY_Pin THRM_SEN_B_DRDY_Pin GPS_PIPPS_Pin */
  GPIO_InitStruct.Pin = THRM_SEN_A_DRDY_Pin|THRM_SEN_B_DRDY_Pin|GPS_PIPPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : X_GPIO_1_Pin */
  GPIO_InitStruct.Pin = X_GPIO_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(X_GPIO_1_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
